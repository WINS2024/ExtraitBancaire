@page "/weather"
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Farenheit">Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody id="weatherTable">
            @for (int i = 0; i < forecasts?.Length; i++)
            {
                var forecast = forecasts[i];
                <tr data-index="@i">
                    <td>Date @(i + 1)</td>
                    <td>@(i + 1)</td>
                    <td>@(32 + (int)((i + 1) / 0.5556))</td>
                    <td>Summary @(i + 1)</td>
                </tr>
            }
        </tbody>
    </table>
}

@* Styles commentés car le drag & drop n'est plus utilisé
<style>
    tr {
        cursor: move;
        user-select: none;
    }
    tr:hover {
        background-color: #f8f9fa;
    }
    .gu-mirror {
        position: fixed !important;
        margin: 0 !important;
        z-index: 9999 !important;
        opacity: 0.9;
        background-color: #fff !important;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2) !important;
        transform: none !important;
    }
    .gu-transit {
        opacity: 0.2;
        background-color: #f8f9fa;
    }
    .gu-mirror td {
        padding: 8px;
        border: 1px solid #dee2e6;
    }
</style>
*@

@code {
    private WeatherForecast[]? forecasts;
    private static Weather? _instance;

    protected override void OnInitialized()
    {
        _instance = this;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("weatherforecast");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching weather data: {ex.Message}");
        }
    }

    @* Code de drag & drop commenté car il n'est plus utilisé
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(500);
            await InitializeDragula();
        }
    }

    private async Task InitializeDragula()
    {
        try
        {
            var isDragulaAvailable = await JSRuntime.InvokeAsync<bool>("eval", "typeof dragula !== 'undefined'");
            Console.WriteLine($"Dragula available: {isDragulaAvailable}");

            if (isDragulaAvailable)
            {
                await JSRuntime.InvokeVoidAsync("eval", @"
                    console.log('Initializing dragula...');
                    const container = document.querySelector('#weatherTable');
                    console.log('Container found:', container);
                    
                    if (container) {
                        const drake = dragula([container], {
                            direction: 'vertical',
                            copy: false,
                            revertOnSpill: true,
                            removeOnSpill: false
                        });

                        drake.on('drag', function(el) {
                            console.log('Drag started');
                        });

                        drake.on('drop', function(el, target, source, sibling) {
                            console.log('Drop event');
                            const oldIndex = parseInt(el.getAttribute('data-index'));
                            const newIndex = sibling ? parseInt(sibling.getAttribute('data-index')) : target.children.length - 1;
                            console.log('Moving from', oldIndex, 'to', newIndex);
                            DotNet.invokeMethodAsync('ExtraitBancaire.Client', 'UpdateWeatherOrder', oldIndex, newIndex);
                        });
                    } else {
                        console.error('Container not found');
                    }
                ");
            }
            else
            {
                Console.WriteLine("Dragula is not loaded");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing dragula: {ex.Message}");
        }
    }

    [JSInvokable("UpdateWeatherOrder")]
    public static async Task UpdateOrder(int oldIndex, int newIndex)
    {
        if (_instance != null && _instance.forecasts != null)
        {
            var list = _instance.forecasts.ToList();
            var item = list[oldIndex];
            list.RemoveAt(oldIndex);
            list.Insert(newIndex, item);
            _instance.forecasts = list.ToArray();
            _instance.StateHasChanged();

            // Mettre à jour les numéros de ligne
            await _instance.JSRuntime.InvokeVoidAsync("eval", @"
                const rows = document.querySelectorAll('#weatherTable tr');
                rows.forEach((row, index) => {
                    const firstCell = row.querySelector('td:first-child');
                    if (firstCell) {
                        firstCell.textContent = 'Date ' + (index + 1);
                    }
                    row.setAttribute('data-index', index.toString());
                });
            ");
        }
    }
    *@

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
