@page "/pdfviewer"
@using ExtraitBancaire.Common
@using System.Text;
@using Microsoft.AspNetCore.Components.Forms;
@using System.Net.Http.Json;
@using ExtraitBancaire.Common.Models;
@using System.Text.Json;
@using System.Globalization;

<div class="d-flex align-items-baseline mb-4">
    <h3 class="me-3">Visualisation des extraits bancaires</h3>
</div>

<div class="row mb-4">
    <div class="col-md-6" style="border-right: 1px solid #ddd; padding-right: 20px;">
        <div class="card">
            <div class="card-body" style="background-color: #f8f9fa;">
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-1">
                            <label for="identiteBancaire" class="form-label text-primary">Identité Bancaire</label>
                            <InputText id="identiteBancaire" @bind-Value="IdentiteBancaire" class="form-control small-input" readonly />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-1">
                            <label for="nomBanque" class="form-label text-primary">Nom de la Banque</label>
                            <InputText id="nomBanque" @bind-Value="NomBanque" class="form-control small-input" readonly />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-1">
                            <label class="form-label text-primary">Solde Initial</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="SoldeInitial" class="form-control small-input" readonly />
                                <span class="input-group-text" style="background-color: #e3f2fd; color: #0d6efd;">@(CreditSoldeInitial > 0 ? "CRÉDITEUR" : (DebitSoldeInitial > 0 ? "DÉBITEUR" : ""))</span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-1">
                            <label class="form-label text-primary">Solde Final</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="NouveauSoldeAu" class="form-control small-input" readonly />
                                <span class="input-group-text" style="background-color: #e3f2fd; color: #0d6efd;">@(DirectionNouveauSoldeAu?.ToUpper() ?? "")</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="d-flex justify-content-between align-items-center mb-3">
            <h4 class="mb-0">Details de l'extrait</h4>
            <button class="btn btn-outline-secondary btn-sm" @onclick="ClearAllFilters">
                <i class="oi oi-x"></i> Effacer tous les filtres
            </button>
        </div>
        <div style="height: 65vh; overflow-y: auto; border: 1px solid #ddd; border-radius: 5px;">
            <table class="table table-bordered table-striped mb-0">
                <thead>
                    <tr>
                        <th style="position: sticky; top: 0; background-color: white; z-index: 10;">N°</th>
                        <th style="position: sticky; top: 0; background-color: white; z-index: 10;">
                            <div class="d-flex justify-content-between align-items-center">
                                <span>Date</span>
                                @if (filterDate.HasValue)
                                {
                                    <button class="btn btn-link btn-sm p-0" @onclick="@(() => ClearFilter("date"))">
                                        <i class="oi oi-x"></i>
                                    </button>
                                }
                            </div>
                            <InputDate @bind-Value="filterDate" class="form-control small-input mt-1" @onchange="OnDateFilterChanged" />
                        </th>
                        <th style="position: sticky; top: 0; background-color: white; z-index: 10;">
                            <div class="d-flex justify-content-between align-items-center">
                                <span>Libelle</span>
                                @if (!string.IsNullOrEmpty(filterLibelle))
                                {
                                    <button class="btn btn-link btn-sm p-0" @onclick="@(() => ClearFilter("libelle"))">
                                        <i class="oi oi-x"></i>
                                    </button>
                                }
                            </div>
                            <InputText @bind-Value="filterLibelle" class="form-control small-input mt-1" @oninput="OnLibelleFilterChanged" />
                        </th>
                        <th style="position: sticky; top: 0; background-color: white; z-index: 10;">
                            <div class="d-flex justify-content-between align-items-center">
                                <span>Debit</span>
                                @if (filterDebit.HasValue)
                                {
                                    <button class="btn btn-link btn-sm p-0" @onclick="@(() => ClearFilter("debit"))">
                                        <i class="oi oi-x"></i>
                                    </button>
                                }
                            </div>
                            <InputNumber @bind-Value="filterDebit" class="form-control small-input mt-1" @oninput="OnDebitFilterChanged" Step="0.01" />
                        </th>
                        <th style="position: sticky; top: 0; background-color: white; z-index: 10;">
                            <div class="d-flex justify-content-between align-items-center">
                                <span>Credit</span>
                                @if (filterCredit.HasValue)
                                {
                                    <button class="btn btn-link btn-sm p-0" @onclick="@(() => ClearFilter("credit"))">
                                        <i class="oi oi-x"></i>
                                    </button>
                                }
                            </div>
                            <InputNumber @bind-Value="filterCredit" class="form-control small-input mt-1" @oninput="OnCreditFilterChanged" Step="0.01" />
                        </th>
                        <th style="position: sticky; top: 0; background-color: white; z-index: 10;">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (FilteredEntries == null || !FilteredEntries.Any())
                    {
                        <tr><td colspan="4" class="text-center">Aucune donnee correspondante.</td></tr>
                    }
                    else
                    {
                        int i = 1;
                        @foreach (var entry in FilteredEntries)
                        {
                            <tr>
                                <td>@(i++)</td>
                                <td><InputDate @bind-Value="entry.Date" class="form-control" /></td>
                                <td><InputText @bind-Value="entry.Libelle" class="form-control" /></td>
                                <td><InputNumber @bind-Value="entry.Debit" class="form-control" Step="0.01" @oninput="RecalculateTotals" /></td>
                                <td><InputNumber @bind-Value="entry.Credit" class="form-control" Step="0.01" @oninput="RecalculateTotals" /></td>
                                <td>
                                    <button class="btn btn-danger btn-sm me-1" @onclick="@(() => DeleteEntry(entry))">
                                        <i class="oi oi-trash"></i>
                                    </button>
                                    <button class="btn btn-success btn-sm" @onclick="@(() => AddEntry(entry))">
                                        <i class="oi oi-plus"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

        <style>
            .table-bordered th, .table-bordered td {
                border: 1px solid #dee2e6;
            }
            .table-striped tbody tr:nth-of-type(odd) {
                background-color: rgba(0, 0, 0, 0.03);
            }
            .table-striped tbody tr:nth-of-type(even) {
                background-color: #fff;
            }
            /* Remettre la hauteur precedente pour les champs de la table */
            .table td .form-control,
            .table th .form-control {
                height: 28px; 
                padding: .25rem .5rem;
                font-size: .875rem;
                line-height: 1.5;
            }
            /* Alignement du texte pour les colonnes Débit et Crédit */
            .table th:nth-child(3), .table td:nth-child(3),
            .table th:nth-child(4), .table td:nth-child(4) {
                text-align: right;
            }
            /* Alignement du texte pour les colonnes Date et Libellé */
            .table th:nth-child(1), .table td:nth-child(1),
            .table th:nth-child(2), .table td:nth-child(2) {
                text-align: left;
            }
        </style>

        @if (extractedEntries != null && extractedEntries.Any())
        {
            <div class="mt-3 p-2 border rounded" style="background-color: #f8f9fa;">
                <div class="row">
                    <div class="col-4">
                        <label class="form-label small">Nouveau Solde :</label>
                        <InputNumber @bind-Value="NouveauSoldeAu" class="form-control small-input" Step="0.01" readonly />
                        <small class="text-muted">@DirectionNouveauSoldeAu</small>
                    </div>
                    <div class="col-4">
                        <label class="form-label small">Total Debit :</label>
                        <InputNumber @bind-Value="TotalDebit" class="form-control small-input" Step="0.01" readonly />
                    </div>
                    <div class="col-4">
                        <label class="form-label small">Total Credit :</label>
                        <InputNumber @bind-Value="TotalCredit" class="form-control small-input" Step="0.01" readonly />
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-body" style="background-color: #f8f9fa;">
                <h4>Apercu du PDF</h4>
                <div class="d-flex align-items-center mb-3">
                    <InputFile OnChange="HandleFileSelected" accept=".pdf" class="form-control me-2 rounded" />
                    <button class="btn btn-info rounded" @onclick="ExtractPdf" disabled="@isLoading">@buttonText</button>
                </div>
                <div class="d-flex align-items-center justify-content-center mb-3">
                    <label for="batcheDate" class="form-label text-primary mb-0 me-2">Mois du Relevé</label>
                    <InputText id="batcheDate" @bind-Value="BatcheDate" class="form-control form-control-sm" disabled style="width: 120px;" />
                </div>
                <div style="border: 1px solid #ddd; height: calc(100vh - 250px); overflow: auto; margin-top: 10px;">
                    @if (!string.IsNullOrEmpty(pdfSrc))
                    {
                        <iframe src="@pdfSrc" width="100%" height="100%"></iframe>
                    }
                    else
                    {
                        <p>Veuillez telecharger un fichier PDF pour l'afficher.</p>
                    }
                </div>
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <p class="text-danger">Erreur: @errorMessage</p>
                }
            </div>
        </div>
    </div>
</div>

@* Modale de chargement *@
<div class="modal" tabindex="-1" style="display: @(isLoading ? "block" : "none");" aria-modal="true" role="dialog">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-body text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Chargement...</span>
                </div>
                <p class="mt-3">Extraction en cours, veuillez patienter...</p>
            </div>
        </div>
    </div>
</div>

@code {
    [Inject] HttpClient Http { get; set; }
    private string? pdfSrc;
    private List<ExtraitBancaireEntry>? extractedEntries;
    private bool isLoading = false;
    private string buttonText = "Extraire";
    private string? errorMessage;
    private decimal TotalDebit { get; set; }
    private decimal TotalCredit { get; set; }

    // Nouveaux champs
    private string? IdentiteBancaire { get; set; }
    private decimal DebitSoldeInitial { get; set; }
    private decimal CreditSoldeInitial { get; set; }
    private decimal SoldeInitial { get; set; }

    private string NomBanque { get; set; }
    private string BatcheDate { get; set; }

    // Nouveaux champs pour Solde Final
    private decimal NouveauSoldeAu { get; set; }
    private string DirectionNouveauSoldeAu { get; set; }

    // Proprietes pour les filtres
    private DateTime? filterDate { get; set; }
    private string? filterLibelle { get; set; }
    private decimal? filterDebit { get; set; }
    private decimal? filterCredit { get; set; }

    private IEnumerable<ExtraitBancaireEntry>? FilteredEntries => extractedEntries?.Where(entry =>
    {
        bool dateMatch = !filterDate.HasValue || entry.Date.Date == filterDate.Value.Date;
        bool libelleMatch = string.IsNullOrEmpty(filterLibelle) ||
                            (entry.Libelle?.Contains(filterLibelle, StringComparison.OrdinalIgnoreCase) ?? false);
        bool debitMatch = !filterDebit.HasValue || entry.Debit == filterDebit.Value;
        bool creditMatch = !filterCredit.HasValue || entry.Credit == filterCredit.Value;

        return dateMatch && libelleMatch && debitMatch && creditMatch;
    });

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null && file.ContentType == "application/pdf")
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            pdfSrc = $"data:application/pdf;base64,{Convert.ToBase64String(buffer)}#zoom=100";
            extractedEntries = null; // Clear previous results
            errorMessage = null; // Clear previous errors
            TotalDebit = 0; // Clear previous totals
            TotalCredit = 0; // Clear previous totals

            // Reinitialiser les filtres
            filterDate = null;
            filterLibelle = null;
            filterDebit = null;
            filterCredit = null;
        }
        else
        {
            pdfSrc = null;
            // Gerer les erreurs, par exemple, afficher un message a l'utilisateur
            Console.WriteLine("Le fichier selectionne n'est pas un PDF ou est invalide.");
        }
    }

    private async Task ExtractPdf()
    {
        if (string.IsNullOrEmpty(pdfSrc))
        {
            errorMessage = "Veuillez d'abord telecharger un fichier PDF.";
            return;
        }

        isLoading = true;
        buttonText = "Extraction...";
        errorMessage = null;
        extractedEntries = null;

        try
        {
            // Remove the "data:application/pdf;base64," prefix
            string base64Content = pdfSrc.Split(',')[1];

            // Supprimer la partie ancre (#zoom=100) si elle existe
            int hashIndex = base64Content.IndexOf('#');
            if (hashIndex != -1)
            {
                base64Content = base64Content.Substring(0, hashIndex);
            }

            // Logging pour le débogage
            Console.WriteLine($"Longueur de la chaîne Base64 à envoyer : {base64Content.Length}");
            Console.WriteLine($"Début de la chaîne Base64 : {base64Content.Substring(0, Math.Min(base64Content.Length, 100))}");
            Console.WriteLine($"Fin de la chaîne Base64 : {base64Content.Substring(Math.Max(0, base64Content.Length - 100))}");

            // Envoi de la chaine Base64 directement en tant que StringContent
            var content = new StringContent(base64Content, Encoding.UTF8, "text/plain");
            var response = await Http.PostAsync("extractpdf", content);

            response.EnsureSuccessStatusCode(); // Throws if not success

            try 
            {
                var rawResponseContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Réponse de l'API (brute) : {rawResponseContent}");

                ExtractionResult extractionResult;
                try
                {
                    // Tenter de désérialiser directement (pour le cas où l'API renverrait directement du JSON)
                    extractionResult = JsonSerializer.Deserialize<ExtractionResult>(rawResponseContent);
                }
                catch (JsonException)
                {
                    // Si la désérialisation directe échoue, cela signifie probablement que la chaîne est échappée
                    Console.WriteLine("La réponse JSON est échappée. Tentative de déséchappement...");
                    string unescapedJsonString = JsonSerializer.Deserialize<string>(rawResponseContent);
                    Console.WriteLine($"Réponse de l'API (dé-échappée) : {unescapedJsonString}");
                    extractionResult = JsonSerializer.Deserialize<ExtractionResult>(unescapedJsonString);
                }

                if (extractionResult?.Data != null && extractionResult.Data.Any())
                {
                    var firstData = extractionResult.Data[0];
                    
                    // Mise à jour des informations d'identité bancaire
                    IdentiteBancaire = firstData.ReleveIdentiteBancaire;
                    NomBanque = firstData.NomBanque;
                    BatcheDate = firstData.BatcheDate;
                    
                    // Mise à jour des soldes initiaux
                    DebitSoldeInitial = firstData.SoldeInitial.DebitSoldeInitial;
                    CreditSoldeInitial = firstData.SoldeInitial.CreditSoldeInitial;
                    
                    // Calcul du Solde Initial
                    if (CreditSoldeInitial > 0)
                    {
                        SoldeInitial = CreditSoldeInitial;
                    }
                    else if (DebitSoldeInitial > 0)
                    {
                        SoldeInitial = DebitSoldeInitial;
                    }
                    else
                    {
                        SoldeInitial = 0; // Ou une autre valeur par defaut si necessaire
                    }

                    // Conversion des opérations
                    extractedEntries = firstData.Operations.Select(op => 
                    {
                        DateTime parsedDate;
                        if (!DateTime.TryParseExact(op.DateOperation, "dd/MM/yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out parsedDate))
                        {
                            // Gérer le cas où la date ne peut pas être parsée
                            Console.WriteLine($"Erreur de parsing de la date: {op.DateOperation}");
                            parsedDate = default(DateTime); // Ou une autre valeur par défaut
                        }

                        return new ExtraitBancaireEntry 
                        {
                            Date = parsedDate,
                            Libelle = op.DescriptionOp,
                            Debit = op.DebitOp ?? 0,
                            Credit = op.CreditOp ?? 0
                        };
                    }).ToList();

                    // Utilisation des totaux fournis par l'API
                    TotalDebit = firstData.SoldeFinal.TotalDebit;
                    TotalCredit = firstData.SoldeFinal.TotalCredit;

                    // Mise à jour du Solde Final
                    NouveauSoldeAu = firstData.SoldeFinal.NouveauSoldeAu;
                    DirectionNouveauSoldeAu = firstData.SoldeFinal.DirectionNouveauSoldeAu;
                }
            }
            catch (JsonException jsonEx)
            {
                errorMessage = $"Erreur de désérialisation JSON : {jsonEx.Message}\nPosition : {jsonEx.BytePositionInLine}\nLigne : {jsonEx.LineNumber}";
                Console.WriteLine($"JsonException: {jsonEx.Message}");
                Console.WriteLine($"Position: {jsonEx.BytePositionInLine}");
                Console.WriteLine($"Ligne: {jsonEx.LineNumber}");
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Erreur de communication avec l'API : {ex.Message}";
            Console.WriteLine($"HttpRequestException: {ex.Message}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Une erreur inattendue est survenue lors de l'extraction : {ex.Message}";
            Console.WriteLine($"Exception: {ex.Message}");
            Console.WriteLine($"Stack Trace: {ex.StackTrace}");
        }
        finally
        {
            isLoading = false;
            buttonText = "Extraire";
        }
    }

    private void OnFilterChanged()
    {
        // Debug : Afficher l'etat de tous les filtres
        Console.WriteLine($"Filtre Date: {filterDate?.ToShortDateString() ?? "null"}, Libelle: {filterLibelle ?? "null"}, Debit: {filterDebit?.ToString("N2") ?? "null"}, Credit: {filterCredit?.ToString("N2") ?? "null"}");
        StateHasChanged(); // Forcer la mise a jour de l'interface utilisateur
    }

    private void OnDateFilterChanged(ChangeEventArgs e)
    {
        filterDate = (DateTime?)e.Value;
        filterLibelle = null;
        filterDebit = null;
        filterCredit = null;
        StateHasChanged();
    }

    private void OnLibelleFilterChanged(ChangeEventArgs e)
    {
        filterLibelle = e.Value?.ToString();
        filterDate = null;
        filterDebit = null;
        filterCredit = null;
        StateHasChanged();
    }

    private void OnDebitFilterChanged(ChangeEventArgs e)
    {
        if (decimal.TryParse(e.Value?.ToString(), out decimal parsedValue))
        {
            filterDebit = parsedValue;
        }
        else
        {
            filterDebit = null; // Gérer les cas où l'entrée n'est pas un nombre valide
        }
        filterDate = null;
        filterLibelle = null;
        filterCredit = null;
        StateHasChanged();
    }

    private void OnCreditFilterChanged(ChangeEventArgs e)
    {
        if (decimal.TryParse(e.Value?.ToString(), out decimal parsedValue))
        {
            filterCredit = parsedValue;
        }
        else
        {
            filterCredit = null; // Gérer les cas où l'entrée n'est pas un nombre valide
        }
        filterDate = null;
        filterLibelle = null;
        filterDebit = null;
        StateHasChanged();
    }

    private void RecalculateTotals()
    {
        TotalDebit = FilteredEntries?.Sum(e => e.Debit) ?? 0;
        TotalCredit = FilteredEntries?.Sum(e => e.Credit) ?? 0;
        StateHasChanged();
    }

    private void ClearFilter(string filterType)
    {
        switch (filterType.ToLower())
        {
            case "date":
                filterDate = null;
                break;
            case "libelle":
                filterLibelle = null;
                break;
            case "debit":
                filterDebit = null;
                break;
            case "credit":
                filterCredit = null;
                break;
        }
        StateHasChanged();
    }

    private void ClearAllFilters()
    {
        filterDate = null;
        filterLibelle = null;
        filterDebit = null;
        filterCredit = null;
        StateHasChanged();
    }

    // Methodes pour Ajouter/Supprimer des lignes
    private void DeleteEntry(ExtraitBancaireEntry entryToDelete)
    {
        if (extractedEntries != null)
        {
            extractedEntries.Remove(entryToDelete);
            RecalculateTotals();
            StateHasChanged();
        }
    }

    private void AddEntry(ExtraitBancaireEntry? existingEntry = null)
    {
        if (extractedEntries == null)
        {
            extractedEntries = new List<ExtraitBancaireEntry>();
        }

        var newEntry = new ExtraitBancaireEntry
        {
            Date = DateTime.Today, // Date par defaut
            Libelle = "Nouvelle opération", // Libelle par defaut
            Debit = 0,
            Credit = 0
        };

        if (existingEntry != null)
        {
            int index = extractedEntries.IndexOf(existingEntry);
            if (index != -1)
            {
                extractedEntries.Insert(index + 1, newEntry);
            }
            else
            {
                extractedEntries.Add(newEntry); // Repli : ajouter a la fin si l'entree existante non trouvee
            }
        }
        else
        {
            extractedEntries.Add(newEntry); // Ajouter a la fin si aucune entree existante n'est fournie
        }

        RecalculateTotals();
        StateHasChanged();
    }
}

<style>
    input.form-control.small-input,
    .small-input.form-control,
    .input-group-text {
        height: 24px !important;
        padding: .15rem .5rem !important;
        font-size: .875rem;
        line-height: 1.5;
    }

    /* Styles pour les boutons modernes */
    .btn-info.rounded {
        border-radius: .5rem; /* Plus arrondi */
    }

    .form-control.rounded {
        border-radius: .5rem; /* Plus arrondi */
    }

    /* Optionnel: Hover effect pour les boutons */
    .btn-info:hover {
        filter: brightness(1.1); /* Rendre légèrement plus lumineux au survol */
    }
</style> 